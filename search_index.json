{"index":{"version":"0.5.12","fields":[{"name":"title","boost":10},{"name":"keywords","boost":15},{"name":"body","boost":1}],"ref":"url","documentStore":{"store":{"./":["#","10.24.1","6.x",":","build","gitbook","init","introduct","node","npm:","serv","只需要一次","启动","版本"],"BinaryTree.html":["!=","!s.isempty()){","/","//","0;","1。平衡二叉树的目的是保持树的高度较小，以确保高效的查找、插入和删除操作。","2i","2i+1","=","==","an","ans.add(cur.val);","ans.add(node.val);","ans.add(root.val);","ans;","arraylist<>();","avl","binari","binarytre","bst","class","collections.reverse(ans);","cur","cur.left;","cur.right;","for(int","if(cur","if(node.left","if(node.right","if(root","inordertraversal(root.left);","inordertraversal(root.right);","inordertraversal(treenod","int","left,","left;","levelorder(treenod","linkedlist<>();","list","list>","n","new","node","null","null){","postordertraversal(root.left);","postordertraversal(root.right);","postordertraversal(treenod","preordertraversal(root.left);","preordertraversal(root.right);","preordertraversal(treenod","public","q","q.offer(root);","q.size();","queue","return","right)","right;","root)","root;","s","s.pop();","s.push(cur);","s.push(node.left);","s.push(node.right);","s.push(root);","search","solut","stack","stack<>();","this.left","this.right","this.val","tree","treenod","treenode()","treenode(int","tree）：","tree，bst）：","val)","val,","val;","while(!q.isempty()){","while(!s.isempty()){","while(cur","{","{}","||","}","个位置。","个位置，右子节点存储在数组的第","个节点，其左子节点存储在数组的第","中可以快速地执行查找、插入和删除操作。","中序遍历","二叉搜索树（binari","二叉树","二叉树的定义：二叉树是每个结点最多只能有两个分支的树，左边的分支称为左子树，右边的分支称为右子树。","使用数组来表示二叉树，按照某种规律将树的节点存储在数组中。","使用节点和指针的链式结构来表示二叉树。","前序遍历","前序遍历是：根左右，后序遍历是左右根；可以发现，将前序遍历倒着输出是右左根，所以只需要将前序遍历改成根右左，倒着输出就是后序遍历。","反转","后序遍历","和前序的相反","在二叉搜索树中，对于每个节点，其左子树的所有节点的值都小于它的值，而右子树的所有节点的值都大于它的值。这使得在","在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多","在完全二叉树中，除了最后一层，其他每一层的节点都被完全填充，最后一层的节点尽量靠左排列。","在满二叉树中，每个节点都有零或两个子节点。所有叶子节点都在同一层，每一层的节点数都是满的。","在非空二叉树中，第层结点总数不超过，=1\">","存储方式","完全二叉树（complet","定义","对于二叉树的第","对于任意一颗二叉树，如果叶结点数为，而度数为2的结点总数为，则=","层序遍历","平衡二叉树是一种特殊的二叉搜索树，它的左右子树高度差不超过","平衡二叉树（balanc","抄的一道题目","深度为的二叉树最多有个个结点（=1\">），最少有个结点","满二叉树（full","特点","种类","这种存储方式适用于完全二叉树，但对于非完全二叉树会浪费一些空间。","迭代法","迭代法（用栈模拟递归）","适合多种二叉树。","递归法","遍历方式","采用广度优先搜索","链式存储","非叶子结点的度(结点拥有的子树数目称为结点的度)一定是2","顺序存储"]},"length":2},"tokenStore":{"root":{"0":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}},"1":{"0":{"docs":{},".":{"2":{"4":{"docs":{},".":{"1":{"docs":{"./":{"ref":"./","tf":0.0625}}},"docs":{}}},"docs":{}},"docs":{}}},"docs":{},"。":{"docs":{},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"目":{"docs":{},"的":{"docs":{},"是":{"docs":{},"保":{"docs":{},"持":{"docs":{},"树":{"docs":{},"的":{"docs":{},"高":{"docs":{},"度":{"docs":{},"较":{"docs":{},"小":{"docs":{},"，":{"docs":{},"以":{"docs":{},"确":{"docs":{},"保":{"docs":{},"高":{"docs":{},"效":{"docs":{},"的":{"docs":{},"查":{"docs":{},"找":{"docs":{},"、":{"docs":{},"插":{"docs":{},"入":{"docs":{},"和":{"docs":{},"删":{"docs":{},"除":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"2":{"docs":{},"i":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}},"+":{"1":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}},"docs":{}}}},"6":{"docs":{},".":{"docs":{},"x":{"docs":{"./":{"ref":"./","tf":0.0625}}}}},"docs":{},"#":{"docs":{"./":{"ref":"./","tf":0.0625}}},":":{"docs":{"./":{"ref":"./","tf":0.0625}}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"./":{"ref":"./","tf":0.0625}}}}}},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.008264462809917356}}},"y":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":10}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"k":{"docs":{"./":{"ref":"./","tf":0.25}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":0.0625}}}},"t":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"./":{"ref":"./","tf":10}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.01928374655647383}}}}}}}}},"n":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"./":{"ref":"./","tf":0.0625},"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}},"p":{"docs":{},"m":{"docs":{},":":{"docs":{"./":{"ref":"./","tf":0.0625}}}}},"e":{"docs":{},"w":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.03305785123966942}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}},")":{"docs":{},"{":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.03305785123966942}}}}}}}},"s":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.008264462809917356}},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"./":{"ref":"./","tf":0.0625}}}},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}},".":{"docs":{},"p":{"docs":{},"o":{"docs":{},"p":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.008264462809917356}}}}}}},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{},"u":{"docs":{},"t":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.01928374655647383}}}}}},"t":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.008264462809917356}},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.008264462809917356}}}}}}}}}}}},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"一":{"docs":{},"次":{"docs":{"./":{"ref":"./","tf":0.0625}}}}}}},"启":{"docs":{},"动":{"docs":{"./":{"ref":"./","tf":0.0625}}}},"版":{"docs":{},"本":{"docs":{"./":{"ref":"./","tf":0.0625}}}},"!":{"docs":{},"=":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.01652892561983471}}},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}},"/":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}},"/":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}},"=":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.06611570247933884}},"=":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.01928374655647383}}}},"a":{"docs":{},"n":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.01928374655647383}},"s":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.008264462809917356}}}}}}}}}}}}}}}}},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.03581267217630854}}}}},"r":{"docs":{},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.02203856749311295}}}}}}}}}}}}}}},"v":{"docs":{},"l":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.02203856749311295}}}}}},"o":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},"n":{"docs":{},"s":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.011019283746556474}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},",":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}},"v":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"<":{"docs":{},">":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.03581267217630854}},">":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}},"p":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"o":{"docs":{},"r":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"a":{"docs":{},"l":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.02203856749311295}}}}}}}},"q":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}},".":{"docs":{},"o":{"docs":{},"f":{"docs":{},"f":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"r":{"docs":{},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}},"s":{"docs":{},"i":{"docs":{},"z":{"docs":{},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.03581267217630854}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{},")":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}},"o":{"docs":{},"o":{"docs":{},"t":{"docs":{},")":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.01928374655647383}}},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}},"n":{"docs":{},"o":{"docs":{},"d":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.02203856749311295}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}}}}},"）":{"docs":{},"：":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.008264462809917356}}}},"，":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"）":{"docs":{},"：":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},")":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}},",":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}},";":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.008264462809917356}}}}}},"w":{"docs":{},"h":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{},"(":{"docs":{},"!":{"docs":{},"q":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},"{":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}}}}}}}}}}}}}}}},"c":{"docs":{},"u":{"docs":{},"r":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}},"{":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.049586776859504134}},"}":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}},"|":{"docs":{},"|":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}},"}":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.08539944903581267}}},"个":{"docs":{},"位":{"docs":{},"置":{"docs":{},"。":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}},"，":{"docs":{},"右":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"存":{"docs":{},"储":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"第":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"其":{"docs":{},"左":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"存":{"docs":{},"储":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"的":{"docs":{},"第":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}},"中":{"docs":{},"可":{"docs":{},"以":{"docs":{},"快":{"docs":{},"速":{"docs":{},"地":{"docs":{},"执":{"docs":{},"行":{"docs":{},"查":{"docs":{},"找":{"docs":{},"、":{"docs":{},"插":{"docs":{},"入":{"docs":{},"和":{"docs":{},"删":{"docs":{},"除":{"docs":{},"操":{"docs":{},"作":{"docs":{},"。":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"（":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}},"树":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}},"的":{"docs":{},"定":{"docs":{},"义":{"docs":{},"：":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"是":{"docs":{},"每":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"最":{"docs":{},"多":{"docs":{},"只":{"docs":{},"能":{"docs":{},"有":{"docs":{},"两":{"docs":{},"个":{"docs":{},"分":{"docs":{},"支":{"docs":{},"的":{"docs":{},"树":{"docs":{},"，":{"docs":{},"左":{"docs":{},"边":{"docs":{},"的":{"docs":{},"分":{"docs":{},"支":{"docs":{},"称":{"docs":{},"为":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"，":{"docs":{},"右":{"docs":{},"边":{"docs":{},"的":{"docs":{},"分":{"docs":{},"支":{"docs":{},"称":{"docs":{},"为":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"。":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"使":{"docs":{},"用":{"docs":{},"数":{"docs":{},"组":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"按":{"docs":{},"照":{"docs":{},"某":{"docs":{},"种":{"docs":{},"规":{"docs":{},"律":{"docs":{},"将":{"docs":{},"树":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"存":{"docs":{},"储":{"docs":{},"在":{"docs":{},"数":{"docs":{},"组":{"docs":{},"中":{"docs":{},"。":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"节":{"docs":{},"点":{"docs":{},"和":{"docs":{},"指":{"docs":{},"针":{"docs":{},"的":{"docs":{},"链":{"docs":{},"式":{"docs":{},"结":{"docs":{},"构":{"docs":{},"来":{"docs":{},"表":{"docs":{},"示":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"。":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}},"是":{"docs":{},"：":{"docs":{},"根":{"docs":{},"左":{"docs":{},"右":{"docs":{},"，":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"是":{"docs":{},"左":{"docs":{},"右":{"docs":{},"根":{"docs":{},"；":{"docs":{},"可":{"docs":{},"以":{"docs":{},"发":{"docs":{},"现":{"docs":{},"，":{"docs":{},"将":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"倒":{"docs":{},"着":{"docs":{},"输":{"docs":{},"出":{"docs":{},"是":{"docs":{},"右":{"docs":{},"左":{"docs":{},"根":{"docs":{},"，":{"docs":{},"所":{"docs":{},"以":{"docs":{},"只":{"docs":{},"需":{"docs":{},"要":{"docs":{},"将":{"docs":{},"前":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"改":{"docs":{},"成":{"docs":{},"根":{"docs":{},"右":{"docs":{},"左":{"docs":{},"，":{"docs":{},"倒":{"docs":{},"着":{"docs":{},"输":{"docs":{},"出":{"docs":{},"就":{"docs":{},"是":{"docs":{},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{},"。":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"反":{"docs":{},"转":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}},"后":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}},"和":{"docs":{},"前":{"docs":{},"序":{"docs":{},"的":{"docs":{},"相":{"docs":{},"反":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}},"在":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"中":{"docs":{},"，":{"docs":{},"对":{"docs":{},"于":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"，":{"docs":{},"其":{"docs":{},"左":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"都":{"docs":{},"小":{"docs":{},"于":{"docs":{},"它":{"docs":{},"的":{"docs":{},"值":{"docs":{},"，":{"docs":{},"而":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"的":{"docs":{},"所":{"docs":{},"有":{"docs":{},"节":{"docs":{},"点":{"docs":{},"的":{"docs":{},"值":{"docs":{},"都":{"docs":{},"大":{"docs":{},"于":{"docs":{},"它":{"docs":{},"的":{"docs":{},"值":{"docs":{},"。":{"docs":{},"这":{"docs":{},"使":{"docs":{},"得":{"docs":{},"在":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"同":{"docs":{},"样":{"docs":{},"深":{"docs":{},"度":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"中":{"docs":{},"，":{"docs":{},"满":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"结":{"docs":{},"点":{"docs":{},"个":{"docs":{},"数":{"docs":{},"最":{"docs":{},"多":{"docs":{},"，":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"数":{"docs":{},"最":{"docs":{},"多":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"完":{"docs":{},"全":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"中":{"docs":{},"，":{"docs":{},"除":{"docs":{},"了":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"层":{"docs":{},"，":{"docs":{},"其":{"docs":{},"他":{"docs":{},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"被":{"docs":{},"完":{"docs":{},"全":{"docs":{},"填":{"docs":{},"充":{"docs":{},"，":{"docs":{},"最":{"docs":{},"后":{"docs":{},"一":{"docs":{},"层":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"尽":{"docs":{},"量":{"docs":{},"靠":{"docs":{},"左":{"docs":{},"排":{"docs":{},"列":{"docs":{},"。":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"满":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"中":{"docs":{},"，":{"docs":{},"每":{"docs":{},"个":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"有":{"docs":{},"零":{"docs":{},"或":{"docs":{},"两":{"docs":{},"个":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"。":{"docs":{},"所":{"docs":{},"有":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"节":{"docs":{},"点":{"docs":{},"都":{"docs":{},"在":{"docs":{},"同":{"docs":{},"一":{"docs":{},"层":{"docs":{},"，":{"docs":{},"每":{"docs":{},"一":{"docs":{},"层":{"docs":{},"的":{"docs":{},"节":{"docs":{},"点":{"docs":{},"数":{"docs":{},"都":{"docs":{},"是":{"docs":{},"满":{"docs":{},"的":{"docs":{},"。":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"非":{"docs":{},"空":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"中":{"docs":{},"，":{"docs":{},"第":{"docs":{},"层":{"docs":{},"结":{"docs":{},"点":{"docs":{},"总":{"docs":{},"数":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"docs":{},"，":{"docs":{},"=":{"1":{"docs":{},"\"":{"docs":{},">":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}},"docs":{}}}}}}}}}}}}}}}}}}}},"存":{"docs":{},"储":{"docs":{},"方":{"docs":{},"式":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}},"完":{"docs":{},"全":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"（":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}},"定":{"docs":{},"义":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}},"对":{"docs":{},"于":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"的":{"docs":{},"第":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}},"任":{"docs":{},"意":{"docs":{},"一":{"docs":{},"颗":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"如":{"docs":{},"果":{"docs":{},"叶":{"docs":{},"结":{"docs":{},"点":{"docs":{},"数":{"docs":{},"为":{"docs":{},"，":{"docs":{},"而":{"docs":{},"度":{"docs":{},"数":{"docs":{},"为":{"2":{"docs":{},"的":{"docs":{},"结":{"docs":{},"点":{"docs":{},"总":{"docs":{},"数":{"docs":{},"为":{"docs":{},"，":{"docs":{},"则":{"docs":{},"=":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}},"层":{"docs":{},"序":{"docs":{},"遍":{"docs":{},"历":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}},"平":{"docs":{},"衡":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"是":{"docs":{},"一":{"docs":{},"种":{"docs":{},"特":{"docs":{},"殊":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"搜":{"docs":{},"索":{"docs":{},"树":{"docs":{},"，":{"docs":{},"它":{"docs":{},"的":{"docs":{},"左":{"docs":{},"右":{"docs":{},"子":{"docs":{},"树":{"docs":{},"高":{"docs":{},"度":{"docs":{},"差":{"docs":{},"不":{"docs":{},"超":{"docs":{},"过":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}},"（":{"docs":{},"b":{"docs":{},"a":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}},"抄":{"docs":{},"的":{"docs":{},"一":{"docs":{},"道":{"docs":{},"题":{"docs":{},"目":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}},"深":{"docs":{},"度":{"docs":{},"为":{"docs":{},"的":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"最":{"docs":{},"多":{"docs":{},"有":{"docs":{},"个":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{},"（":{"docs":{},"=":{"1":{"docs":{},"\"":{"docs":{},">":{"docs":{},"）":{"docs":{},"，":{"docs":{},"最":{"docs":{},"少":{"docs":{},"有":{"docs":{},"个":{"docs":{},"结":{"docs":{},"点":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}},"docs":{}}}}}}}}}}}}}}}}},"满":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"（":{"docs":{},"f":{"docs":{},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}},"特":{"docs":{},"点":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}},"种":{"docs":{},"类":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}},"这":{"docs":{},"种":{"docs":{},"存":{"docs":{},"储":{"docs":{},"方":{"docs":{},"式":{"docs":{},"适":{"docs":{},"用":{"docs":{},"于":{"docs":{},"完":{"docs":{},"全":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"，":{"docs":{},"但":{"docs":{},"对":{"docs":{},"于":{"docs":{},"非":{"docs":{},"完":{"docs":{},"全":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"会":{"docs":{},"浪":{"docs":{},"费":{"docs":{},"一":{"docs":{},"些":{"docs":{},"空":{"docs":{},"间":{"docs":{},"。":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"迭":{"docs":{},"代":{"docs":{},"法":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.005509641873278237}},"（":{"docs":{},"用":{"docs":{},"栈":{"docs":{},"模":{"docs":{},"拟":{"docs":{},"递":{"docs":{},"归":{"docs":{},"）":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}}}}},"适":{"docs":{},"合":{"docs":{},"多":{"docs":{},"种":{"docs":{},"二":{"docs":{},"叉":{"docs":{},"树":{"docs":{},"。":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}},"递":{"docs":{},"归":{"docs":{},"法":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.008264462809917356}}}}},"遍":{"docs":{},"历":{"docs":{},"方":{"docs":{},"式":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}},"采":{"docs":{},"用":{"docs":{},"广":{"docs":{},"度":{"docs":{},"优":{"docs":{},"先":{"docs":{},"搜":{"docs":{},"索":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}}}}},"链":{"docs":{},"式":{"docs":{},"存":{"docs":{},"储":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}},"非":{"docs":{},"叶":{"docs":{},"子":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{},"度":{"docs":{},"(":{"docs":{},"结":{"docs":{},"点":{"docs":{},"拥":{"docs":{},"有":{"docs":{},"的":{"docs":{},"子":{"docs":{},"树":{"docs":{},"数":{"docs":{},"目":{"docs":{},"称":{"docs":{},"为":{"docs":{},"结":{"docs":{},"点":{"docs":{},"的":{"docs":{},"度":{"docs":{},")":{"docs":{},"一":{"docs":{},"定":{"docs":{},"是":{"2":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}},"docs":{}}}}}}}}}}}}}}}}}}}}}}}}}}}},"顺":{"docs":{},"序":{"docs":{},"存":{"docs":{},"储":{"docs":{"BinaryTree.html":{"ref":"BinaryTree.html","tf":0.0027548209366391185}}}}}}},"length":147},"corpusTokens":["!=","!s.isempty()){","#","/","//","0;","10.24.1","1。平衡二叉树的目的是保持树的高度较小，以确保高效的查找、插入和删除操作。","2i","2i+1","6.x",":","=","==","an","ans.add(cur.val);","ans.add(node.val);","ans.add(root.val);","ans;","arraylist<>();","avl","binari","binarytre","bst","build","class","collections.reverse(ans);","cur","cur.left;","cur.right;","for(int","gitbook","if(cur","if(node.left","if(node.right","if(root","init","inordertraversal(root.left);","inordertraversal(root.right);","inordertraversal(treenod","int","introduct","left,","left;","levelorder(treenod","linkedlist<>();","list","list>","n","new","node","npm:","null","null){","postordertraversal(root.left);","postordertraversal(root.right);","postordertraversal(treenod","preordertraversal(root.left);","preordertraversal(root.right);","preordertraversal(treenod","public","q","q.offer(root);","q.size();","queue","return","right)","right;","root)","root;","s","s.pop();","s.push(cur);","s.push(node.left);","s.push(node.right);","s.push(root);","search","serv","solut","stack","stack<>();","this.left","this.right","this.val","tree","treenod","treenode()","treenode(int","tree）：","tree，bst）：","val)","val,","val;","while(!q.isempty()){","while(!s.isempty()){","while(cur","{","{}","||","}","个位置。","个位置，右子节点存储在数组的第","个节点，其左子节点存储在数组的第","中可以快速地执行查找、插入和删除操作。","中序遍历","二叉搜索树（binari","二叉树","二叉树的定义：二叉树是每个结点最多只能有两个分支的树，左边的分支称为左子树，右边的分支称为右子树。","使用数组来表示二叉树，按照某种规律将树的节点存储在数组中。","使用节点和指针的链式结构来表示二叉树。","前序遍历","前序遍历是：根左右，后序遍历是左右根；可以发现，将前序遍历倒着输出是右左根，所以只需要将前序遍历改成根右左，倒着输出就是后序遍历。","反转","只需要一次","后序遍历","启动","和前序的相反","在二叉搜索树中，对于每个节点，其左子树的所有节点的值都小于它的值，而右子树的所有节点的值都大于它的值。这使得在","在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多","在完全二叉树中，除了最后一层，其他每一层的节点都被完全填充，最后一层的节点尽量靠左排列。","在满二叉树中，每个节点都有零或两个子节点。所有叶子节点都在同一层，每一层的节点数都是满的。","在非空二叉树中，第层结点总数不超过，=1\">","存储方式","完全二叉树（complet","定义","对于二叉树的第","对于任意一颗二叉树，如果叶结点数为，而度数为2的结点总数为，则=","层序遍历","平衡二叉树是一种特殊的二叉搜索树，它的左右子树高度差不超过","平衡二叉树（balanc","抄的一道题目","深度为的二叉树最多有个个结点（=1\">），最少有个结点","满二叉树（full","版本","特点","种类","这种存储方式适用于完全二叉树，但对于非完全二叉树会浪费一些空间。","迭代法","迭代法（用栈模拟递归）","适合多种二叉树。","递归法","遍历方式","采用广度优先搜索","链式存储","非叶子结点的度(结点拥有的子树数目称为结点的度)一定是2","顺序存储"],"pipeline":["stopWordFilter","stemmer"]},"store":{"./":{"url":"./","title":"Introduction","keywords":"","body":"gitbook\n版本\nnode : 10.24.1\nnpm: 6.x\n启动\ngitbook init # 只需要一次\ngitbook build\ngitbook serve\n\n \n"},"BinaryTree.html":{"url":"BinaryTree.html","title":"BinaryTree","keywords":"","body":"二叉树\n定义\n二叉树的定义：二叉树是每个结点最多只能有两个分支的树，左边的分支称为左子树，右边的分支称为右子树。\n抄的一道题目\npublic class TreeNode {\n     int val;\n     TreeNode left;\n     TreeNode right;\n     TreeNode() {}\n     TreeNode(int val) { this.val = val; }\n     TreeNode(int val, TreeNode left, TreeNode right) {\n         this.val = val;\n         this.left = left;\n         this.right = right;\n     }\n }\n\n种类\n\n满二叉树（Full Binary Tree）：\n\n\n在满二叉树中，每个节点都有零或两个子节点。所有叶子节点都在同一层，每一层的节点数都是满的。\n非叶子结点的度(结点拥有的子树数目称为结点的度)一定是2\n在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多\n\n\n完全二叉树（Complete Binary Tree）：\n\n\n在完全二叉树中，除了最后一层，其他每一层的节点都被完全填充，最后一层的节点尽量靠左排列。\n\n\n二叉搜索树（Binary Search Tree，BST）：\n\n\n在二叉搜索树中，对于每个节点，其左子树的所有节点的值都小于它的值，而右子树的所有节点的值都大于它的值。这使得在 BST 中可以快速地执行查找、插入和删除操作。\n\n\n平衡二叉树（Balanced Binary Tree / AVL Tree）：\n\n平衡二叉树是一种特殊的二叉搜索树，它的左右子树高度差不超过 1。平衡二叉树的目的是保持树的高度较小，以确保高效的查找、插入和删除操作。\n\n\n\n特点\n\n在非空二叉树中，第层结点总数不超过，=1\">\n\n深度为的二叉树最多有个个结点（=1\">），最少有个结点\n\n对于任意一颗二叉树，如果叶结点数为，而度数为2的结点总数为，则=\n\n\n存储方式\n\n顺序存储\n使用数组来表示二叉树，按照某种规律将树的节点存储在数组中。\n对于二叉树的第 i 个节点，其左子节点存储在数组的第 2i 个位置，右子节点存储在数组的第 2i+1 个位置。\n这种存储方式适用于完全二叉树，但对于非完全二叉树会浪费一些空间。\n\n\n链式存储\n使用节点和指针的链式结构来表示二叉树。\n适合多种二叉树。\n\n\n\n遍历方式\n前序遍历\n\n递归法\nclass Solution {\n    List ans = new ArrayList<>();\n    public List preorderTraversal(TreeNode root) {\n        if(root == null){\n            return ans;\n        }\n\n        ans.add(root.val);\n        preorderTraversal(root.left);\n        preorderTraversal(root.right);       \n        return ans;\n    }  \n}\n\n\n迭代法（用栈模拟递归）\nclass Solution {\n  public List preorderTraversal(TreeNode root) {\n      List ans = new ArrayList<>();\n      Stack s = new Stack<>(); \n      if(root == null){\n          return ans;\n      }\n      s.push(root);\n      while(!s.isEmpty()){\n          TreeNode node = s.pop();\n          ans.add(node.val);\n          if(node.right != null){\n              s.push(node.right);\n          }\n          if(node.left != null){\n              s.push(node.left);\n          }            \n      }\n      return ans;\n  }\n}\n\n\n\n\n\n中序遍历\n\n递归法\nclass Solution {\n    List ans = new ArrayList<>();\n    public List inorderTraversal(TreeNode root) {\n        if(root == null){\n            return ans;\n        }\n\n        inorderTraversal(root.left);\n        ans.add(root.val);\n        inorderTraversal(root.right);\n        return ans;\n    }\n}\n\n\n迭代法\nclass Solution {\n    public List inorderTraversal(TreeNode root) {\n        List ans = new ArrayList<>();\n        Stack s = new Stack<>();\n        if(root == null){\n            return ans;\n        }\n\n        TreeNode cur = root;\n        while(cur != null || !s.isEmpty()){\n            if(cur != null){\n                s.push(cur);\n                cur = cur.left;\n            } else {\n                cur = s.pop();\n                ans.add(cur.val);\n                cur = cur.right;\n            }\n        }\n        return ans;\n    }\n}\n\n\n\n后序遍历\n前序遍历是：根左右，后序遍历是左右根；可以发现，将前序遍历倒着输出是右左根，所以只需要将前序遍历改成根右左，倒着输出就是后序遍历。\n\n递归法\nclass Solution {\n    List ans = new ArrayList<>();\n    public List postorderTraversal(TreeNode root) {\n        if(root == null){\n            return ans;\n        }\n\n        postorderTraversal(root.left);\n        postorderTraversal(root.right);\n        ans.add(root.val);\n        return ans;\n    }\n}\n\n\n迭代法\nclass Solution {\n    public List postorderTraversal(TreeNode root) {\n        List ans = new ArrayList<>();\n        Stack s = new Stack<>(); \n        if(root == null){\n            return ans;\n        }\n        s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node = s.pop();\n            ans.add(node.val);\n            // 和前序的相反\n            if(node.left != null){\n                s.push(node.left);\n            } \n            if(node.right != null){\n                s.push(node.right);\n            }           \n        }\n        // 反转\n        Collections.reverse(ans);\n        return ans;\n    }\n}\n\n\n\n层序遍历\n采用广度优先搜索\nclass Solution {\n    public List> levelOrder(TreeNode root) {\n        Queue q = new LinkedList<>();\n        List> ans = new ArrayList<>();\n        if(root == null){\n            return ans;\n        }\n        q.offer(root);\n\n        while(!q.isEmpty()){\n            int n = q.size();\n            List an = new ArrayList<>();\n            for(int i = 0; i \n"}}}